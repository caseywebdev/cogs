#!/usr/bin/env node

var optimist = require('optimist');
var argv = optimist
  .usage('Usage: $0 input [-o output][-p path][-w watch][-O options][-cvCg]')
  .options({
    output: {
      alias: 'o',
      type: 'string',
      desc: 'The output file. If not specified result is sent to stdout.'
    },
    path: {
      alias: 'p',
      'default': process.cwd(),
      type: 'string',
      desc: 'An environment path or comma-separated paths.'
    },
    options: {
      alias: 'O',
      type: 'string',
      desc: 'JSON for options to be passed to processors and compressors.'
    },
    compress: {
      alias: 'c',
      'default': false,
      type: 'boolean',
      desc: 'Compress using UglifyJS and CleanCss.'
    },
    watch: {
      alias: 'w',
      type: 'string',
      desc: 'A path or comma-separated paths to watch.'
    },
    verbose: {
      alias: 'v',
      'default': false,
      type: 'boolean',
      desc: 'Log build starts, errors and completes in stdout.'
    },
    growl: {
      alias: 'g',
      'default': false,
      type: 'boolean',
      desc: 'Use growl notifications for build starts and completes.'
    }
  })
  .check(function () {
    if (!optimist.argv._[0]) throw new Error('Please specify an input file.');
  })
  .argv;

require('colors').setTheme({info: 'grey', error: 'red', success: 'green'});
var growl = require('growl');
var cogs = require('..');

var alert = function (title, message, type) {
  var name = 'cogs';
  var image = (function () {
    switch (type) {
    case 'success':
      return 'node_modules/mocha/images/ok.png';
    case 'error':
      return 'node_modules/mocha/images/error.png';
    }
  })();
  if (argv.growl) growl(message, {title: title, name: name, image: image});
  message = ('[' + name + '] ' + title.bold + ' ' + message)[type];
  if (type === 'error') return console.error(message);
  if (argv.verbose) console.log(message);
};

var save = function () {
  var input = argv._[0];
  var output = argv.output;
  alert(input, "Building...", 'info');
  var cb = function (er) {
    var end = new Date();
    var duration = (end - start) / 1000;
    if (er) return alert(er.asset ? er.asset.abs : input, er.message, 'error');
    alert(output || 'stdout', 'Built in ' + duration + 's.', 'success');
  };
  var start = new Date();
  if (output) return cogs.saveAs(input, output, cb);
  cogs.asset(input, function (er, asset) {
    if (er) return cb(er);
    asset.build(function (er) {
      if (er) return cb(er);
      process.stdout.write(asset.toString());
      cb();
    });
  });
};

cogs.addPaths(argv.path.split(','));

if (argv.options) {
  var options = JSON.parse(argv.options);
  for (var steps in options) {
    var val = options[steps];
    steps = steps.split('.');
    var obj = cogs;
    for (var i = 0, l = steps.length - 1; i < l; ++i) obj = obj[steps[i]];
    obj[steps[i]] = val;
  }
}

if (argv.compress) {
  cogs.compressors.js = new cogs.UglifyJs();
  cogs.compressors.css = new cogs.CleanCss();
}

save();

if (argv.watch) {
  require('watchr').watch({
    ignoreHiddenFiles: true,
    paths: argv.watch.split(','),
    listener: save
  });
}
